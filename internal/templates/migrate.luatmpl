-- Lua script to create the index.
-- Do not edit this file.

local timestamp = "{{ $.Timestamp }}"

-- Retrieve a list of indexes available.
local idxs = redis.call("FT._LIST")

-- The latest indexes to migrate.
{{ range $_, $schema := $.Schemas -}}
local {{ toSnakeCase $schema.Name }}_idx = "rdsom:{{ $.ProjName }}:idx:{{ $schema.Name }}:{{ $.Timestamp }}"
{{- end }}

local function starts_with(str, start)
	return str:sub(1, #start) == start
end

local function ends_with(str, ending)
   return ending == "" or str:sub(-#ending) == ending
end

{{ range $_, $schema := $.Schemas -}}
local function create_{{ toSnakeCase $schema.Name }}()
  redis.call("FT.CREATE",
  {{ toSnakeCase $schema.Name }}_idx,
  "ON", "HASH",
  "PREFIX", "1", "rdsom:{{ $.ProjName }}:{{ $schema.Name }}:",
  "SCHEMA",
  "id", "TEXT",
  "_empty", "TAG", "CASESENSITIVE",
  {{ $numFields := len $schema.Fields -}}
  {{ range $i, $field := $schema.Fields -}}
  {{ if addInts $i 1 | eq $numFields -}}
  {{ $field.LuaParams }})
{{ else -}}
  {{ $field.LuaParams }},
  {{ end -}}
  {{ end -}}
end
{{- end }}

-- A list of schemas to update.
local schemas = {
  {{ range $_, $schema := $.Schemas -}}
  {{ $schema.Name }} = true,
  {{- end }}
}

-- Map each schema's index to its creation function.
local create_funcs = {
  {{ range $_, $schema := $.Schemas -}}
  {{ $schema.Name }} = create_{{ toSnakeCase $schema.Name }},
  {{- end }}
}

-- First, try to update existing indexes.
for _, idx in ipairs(idxs) do
	if starts_with(idx, "rdsom:{{ $.ProjName }}:idx:") then
    local _, _, schema = string.find(idx, ".+:(.+):%d+")
    if not ends_with(idx, timestamp) then
      redis.call("FT.DROP", idx)
      create_funcs[schema]()
    end
    schemas[schema] = false
	end
end

-- Handle the new indexes.
for schema, should_create in pairs(schemas) do
  if should_create then
    create_funcs[schema]()
  end
end

